module ElasticSurfaceEmbedding

using LinearAlgebra
using Printf
using Distributed
using IntervalSets
using ForwardDiff
using Dates
using DifferentialEquations
using JLD
using JSON

using BSpline
using ParametricDraw

include("Constants.jl")
include("NumericalIntegral.jl")
include("Slack.jl")
include("TreeStructure.jl")
include("GeometryAndElasticity.jl")

export @DefineShape
macro DefineShape(ex)
    global EXPR=ex
    return :(@everywhere $ex)
end

export Settings
function Settings(name;up=5,down=-5,right=5,left=-5,mesh=(10,1),unit=100,slack=true,maximumstrain=0.0)
    global NAME=name
    global DIR=OUT_DIR*NAME
    global UP=up
    global DOWN=down
    global RIGHT=right
    global LEFT=left
    global MESH=mesh
    global UNIT=(unit,"pt")
    global SLACK=slack
    global MAXIMUMSTRAIN=maximumstrain
    return nothing
end

export Restoration
function Restoration()
    if (!isfile(DIR*"/"*NAME*".jld"))
        error("jld file doesn't exists")
    end
    BsJLD=load(DIR*"/"*NAME*".jld")
    println(showtree(BsJLD["BsTree"]))
    global EXPR=BsJLD["Expr"]
    eval(:(@everywhere $EXPR))
    return nothing
end

include("InitialConfiguration.jl")
include("NewtonRaphsonMethod.jl")

function affine(ùíÇ::Array{Float64,3},A::Array{Float64,2},b::Array{Float64,1})::Array{Float64,3}
    #x'=Ax+b
    n‚ÇÅ,n‚ÇÇ,_=size(ùíÇ)
    return [(A*ùíÇ[I‚ÇÅ,I‚ÇÇ,:]+b)[i] for I‚ÇÅ ‚àà 1:n‚ÇÅ, I‚ÇÇ ‚àà 1:n‚ÇÇ, i ‚àà 1:d]
end

function Positioning(ùíÇ::Array{Float64,3})::Array{Float64,3} # Âà∂Âæ°ÁÇπ„ÅÆ‰ΩçÁΩÆË™øÊï¥
    n‚ÇÅ,n‚ÇÇ,_=size(ùíÇ)
    ind0=[(n‚ÇÅ+1)√∑2,(n‚ÇÇ+1)√∑2]
    ind1=ind0-[0,1]
    v=ùíÇ[ind1...,:]-ùíÇ[ind0...,:]
    R=-[v[2] -v[1];v[1] v[2]]/norm(v)
    return ùíÇ=affine(ùíÇ,R,-R*ùíÇ[ind0...,:])
end

function Positioning(M::BSplineManifold)::BSplineManifold # Âà∂Âæ°ÁÇπ„ÅÆ‰ΩçÁΩÆË™øÊï¥
    ùí´s = M.bsplinespaces
    ùíÇ = M.controlpoints
    if (length(ùí´s) ‚â† d)
        error("dimension does not match")
    end

    p¬π,p¬≤=p=[M.bsplinespaces[i].degree for i ‚àà 1:2]
    k¬π,k¬≤=k=[M.bsplinespaces[i].knots for i ‚àà 1:2]

    n‚ÇÅ,n‚ÇÇ,_=size(ùíÇ)
    ùíÇ‚Ä≤=Positioning(ùíÇ)
    return BSplineManifold(ùí´s,ùíÇ‚Ä≤)
end

function Export(M::BSplineManifold,BsTree,BsJLD;comment="",maximumstrain=MAXIMUMSTRAIN)
    index=length(BsTree.nodes)
    BsJLD[string(index)]=M
    BsJLD["BsTree"]=BsTree
    save(DIR*"/"*NAME*".jld",BsJLD)
    println(showtree(BsTree))

    Name=NAME
    Dir=DIR
    Up=UP
    Down=DOWN
    Right=RIGHT
    Left=LEFT
    Mesh=MESH
    Unit=UNIT
    Slack=SLACK
    if (maximumstrain==0.0)
        MS=ComputeMaximumStrain(index=index)
        MaximumStrain=max(-MS[1],MS[2])
    else
        MaximumStrain=maximumstrain
    end

    @spawnat 1 begin
        BSplineSvg(M,filename=Dir*"/nurbs/"*Name*"-"*string(index)*"_Bspline.svg",up=Up,down=Down,right=Right,left=Left,mesh=Mesh,unitlength=Unit)
        ùíÇ = M.controlpoints
        P‚ÇÅ,P‚ÇÇ=P=M.bsplinespaces
        p‚ÇÅ,p‚ÇÇ=p=P‚ÇÅ.degree,P‚ÇÇ.degree
        k‚ÇÅ,k‚ÇÇ=k=P‚ÇÅ.knots,P‚ÇÇ.knots
        D‚ÇÅ,D‚ÇÇ=D=k‚ÇÅ[1+p‚ÇÅ]..k‚ÇÅ[end-p‚ÇÅ],k‚ÇÇ[1+p‚ÇÇ]..k‚ÇÇ[end-p‚ÇÇ]

        rgb(u)=E‚ÅΩ‚Å∞‚Åæ‚ÇÅ‚ÇÅ(M,u)*[1,-1,-1]/(2*MaximumStrain) .+0.5
        # draw strain distribution (6000x6000)
        ParametricColor(u->ùíë‚Çç‚Çú‚Çé(M,u),D,rgb=rgb,filename=Dir*"/strain/"*Name*"-"*string(index)*"_strain.png",up=Up,down=Down,right=Right,left=Left,mesh=tuple(10*[Mesh...]...),unit=5*Unit[1])
        ColorBar(max=MaximumStrain,filename=Dir*"/colorbar/"*Name*"-"*string(index)*"_colorbar.png",width=(Right-Left)*Unit[1])

        # 1200x1200
        # svg to png (1600x1600)
        run(pipeline(`convert $(Dir*"/nurbs/"*Name*"-"*string(index)*"_Bspline.svg") $(Dir*"/nurbs/"*Name*"-"*string(index)*"_Bspline.png")`, stdout=devnull, stderr=devnull))
        # add colorbar to strain distribution figure (6000x6000)
        run(pipeline(`convert $(Dir*"/strain/"*Name*"-"*string(index)*"_strain.png") $(Dir*"/colorbar/"*Name*"-"*string(index)*"_colorbar.png") -gravity southeast -compose over -composite $(Dir*"/strain/"*Name*"-"*string(index)*"_swc.png")`, stdout=devnull, stderr=devnull))
        # resize png
        # (1200x1200)
        run(pipeline(`convert -resize 75% -unsharp 2x1.4+0.5+0 -quality 100 -verbose $(Dir*"/nurbs/"*Name*"-"*string(index)*"_Bspline.png") $(Dir*"/slack/"*Name*"-"*string(index)*"_Bspline.png")`, stdout=devnull, stderr=devnull))
        # (1200x1200)
        run(pipeline(`convert -resize 20% -unsharp 2x1.4+0.5+0 -quality 100 -verbose $(Dir*"/strain/"*Name*"-"*string(index)*"_swc.png") $(Dir*"/slack/"*Name*"-"*string(index)*"_strain.png")`, stdout=devnull, stderr=devnull))
        # line up png
        run(pipeline(`convert +append $(Dir*"/slack/"*Name*"-"*string(index)*"_Bspline.png") $(Dir*"/slack/"*Name*"-"*string(index)*"_strain.png") $(Dir*"/slack/"*Name*"-"*string(index)*"_append.png")`, stdout=devnull, stderr=devnull))

        if (Slack)
            SlackString(showtree(BsTree))
            SlackFile(Dir*"/slack/"*Name*"-"*string(index)*"_append.png")
        end
    end

    return nothing
end

export Refinement
function BSpline.Refinement(;p‚Çä::Union{Nothing,Array{Int,1}}=nothing, k‚Çä::Union{Nothing,Array{Knots,1}}=nothing, parent=0)
    BsJLD=load(DIR*"/"*NAME*".jld")
    BsTree=BsJLD["BsTree"]
    if (parent==0) parent=length(BsTree.nodes) end
    M=BsJLD[string(parent)]

    comment="refinement with "*string(p‚Çä)*", "*string(k‚Çä)
    addchild(BsTree,parent,comment)

    M=BSpline.Refinement(M,p‚Çä=p‚Çä,k‚Çä=k‚Çä)
    Export(M,BsTree,BsJLD,comment=comment)
end

export FinalOutput
function FinalOutput(;index=0,unitlength=(10,"mm"),cutout=(0.1,5),mesh=60)
    BsJLD=load(DIR*"/"*NAME*".jld")
    BsTree=BsJLD["BsTree"]
    # println(showtree(BsTree))

    if (index==0) index=length(BsTree.nodes) end
    M=BsJLD[string(index)]
    BSplineSvg(M,filename=DIR*"/"*NAME*"-"*string(index)*"-final.svg",up=UP,down=DOWN,right=RIGHT,left=LEFT,mesh=MESH,unitlength=unitlength,points=false)

    P‚ÇÅ,P‚ÇÇ=P=M.bsplinespaces
    p‚ÇÅ,p‚ÇÇ=p=P‚ÇÅ.degree,P‚ÇÇ.degree
    k‚ÇÅ,k‚ÇÇ=k=P‚ÇÅ.knots,P‚ÇÇ.knots
    D‚ÇÅ,D‚ÇÇ=D=k‚ÇÅ[1+p‚ÇÅ]..k‚ÇÅ[end-p‚ÇÅ],k‚ÇÇ[1+p‚ÇÇ]..k‚ÇÇ[end-p‚ÇÇ]
    n‚ÇÅ,n‚ÇÇ=n=dim.(P)

    ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÅ(u)=normalize(ùíë‚ÇÅ‚Çç‚Çú‚Çé(M,u))
    ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÇ(u)=[0.0 -1.0;1.0 0.0]*ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÅ(M,u)
    ùíëa(i,t)=ùíë‚Çç‚Çú‚Çé(M,[t,leftendpoint(D‚ÇÇ)])+ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÇ([t,leftendpoint(D‚ÇÇ)])*i*cutout[1]/unitlength[1]
    ùíëb(i,t)=ùíë‚Çç‚Çú‚Çé(M,[t,rightendpoint(D‚ÇÇ)])-ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÇ([t,rightendpoint(D‚ÇÇ)])*i*cutout[1]/unitlength[1]
    SvgCurve([[t->ùíëa(i,t) for i ‚àà 0:cutout[2]]...,[t->ùíëb(i,t) for i ‚àà 0:cutout[2]]...],D‚ÇÅ,filename=DIR*"/"*NAME*"-"*string(index)*"-cutout.svg",up=UP,down=DOWN,right=RIGHT,left=LEFT,thickness=0.1,mesh=mesh,unitlength=unitlength)

    if (SLACK)
        SlackFile(DIR*"/"*NAME*"-"*string(index)*"-final.svg")
        SlackFile(DIR*"/"*NAME*"-"*string(index)*"-cutout.svg")
    end

    return nothing
end

export ShowKnots
function ShowKnots(;index=0)
    BsJLD=load(DIR*"/"*NAME*".jld")
    BsTree=BsJLD["BsTree"]
    if (index==0) index=length(BsTree.nodes) end
    M=BsJLD[string(index)]
    P‚ÇÅ,P‚ÇÇ=M.bsplinespaces
    p‚ÇÅ,p‚ÇÇ=P‚ÇÅ.degree,P‚ÇÇ.degree
    k‚ÇÅ,k‚ÇÇ=P‚ÇÅ.knots,P‚ÇÇ.knots
    println("k‚ÇÅ: ",k‚ÇÅ)
    println("k‚ÇÇ: ",k‚ÇÇ)
    println("Suggestion:")
    k‚ÇÅ‚Ä≤=unique(k‚ÇÅ)
    k‚ÇÇ‚Ä≤=unique(k‚ÇÇ)
    println("k‚ÇÅ‚Çä: ",[(k‚ÇÅ‚Ä≤[i]+k‚ÇÅ‚Ä≤[i+1])/2 for i ‚àà 1:(length(k‚ÇÅ‚Ä≤)-1)])
    println("k‚ÇÇ‚Çä: ",[(k‚ÇÇ‚Ä≤[i]+k‚ÇÇ‚Ä≤[i+1])/2 for i ‚àà 1:(length(k‚ÇÇ‚Ä≤)-1)])

    return nothing
end

function ComputeMaximumStrain(;index=0,mesh=tuple(20*[MESH...]...))
    BsJLD=load(DIR*"/"*NAME*".jld")
    BsTree=BsJLD["BsTree"]
    if (index==0) index=length(BsTree.nodes) end
    M=BsJLD[string(index)]
    ùíÇ=M.controlpoints
    P‚ÇÅ,P‚ÇÇ=P=M.bsplinespaces
    p‚ÇÅ,p‚ÇÇ=p=P‚ÇÅ.degree,P‚ÇÇ.degree
    k‚ÇÅ,k‚ÇÇ=k=P‚ÇÅ.knots,P‚ÇÇ.knots
    D‚ÇÅ,D‚ÇÇ=D=k‚ÇÅ[1+p‚ÇÅ]..k‚ÇÅ[end-p‚ÇÅ],k‚ÇÇ[1+p‚ÇÇ]..k‚ÇÇ[end-p‚ÇÇ]

    Œ∫‚ÇÅ=range(leftendpoint(D‚ÇÅ),stop=rightendpoint(D‚ÇÅ),length=mesh[1]+1)
    Œ∫‚ÇÇ=range(leftendpoint(D‚ÇÇ),stop=rightendpoint(D‚ÇÇ),length=mesh[2]+1)

    E=[E‚ÅΩ‚Å∞‚Åæ‚ÇÅ‚ÇÅ(M,[u‚ÇÅ,u‚ÇÇ]) for u‚ÇÅ ‚àà Œ∫‚ÇÅ, u‚ÇÇ ‚àà Œ∫‚ÇÇ]

    return (minimum(E),maximum(E))
end

export ShowMaximumStrain
function ShowMaximumStrain(;index=0,mesh=5)
    minE,maxE=ComputeMaximumStrain(index=index,mesh=mesh)
    println("min",minE,", max",maxE)

    return nothing
end

export ReDraw
function ReDraw()
    return nothing
end

end # module
