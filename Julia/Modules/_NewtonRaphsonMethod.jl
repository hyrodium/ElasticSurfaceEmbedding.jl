using Dates

function DefaultOrientation(nโ,nโ)
    return (
        [(nโ+1)รท2,(nโ+1)รท2,1],
        [(nโ+1)รท2,(nโ+1)รท2,2],
        [(nโ+1)รท2,(nโ+1)รท2-1,1]
    )
end

function FixThreePoints(nโ,nโ)
    return (
        [1,(nโ+1)รท2,1],
        [1,(nโ+1)รท2,2],
        [(nโ+1)รท2,(nโ+1)รท2,1],
        [(nโ+1)รท2,(nโ+1)รท2,2],
        [nโ,(nโ+1)รท2,1],
        [nโ,(nโ+1)รท2,2]
    )
end

AbbStr(t::Week) = string(t.value)*"w "
AbbStr(t::Day) = string(t.value)*"d "
AbbStr(t::Hour) = string(t.value)*"h "
AbbStr(t::Minute) = string(t.value)*"m "
AbbStr(t::Second) = string(t.value)*"s "
AbbStr(t::Millisecond) = string(t.value)*"ms "
AbbStr(t::Vector{Period}) = *(AbbStr.(t)...)[1:end-1]

function SecondsToString(ฮt::Float64)
    prds=Dates.canonicalize(Dates.CompoundPeriod(Dates.Millisecond(floor(1000ฮt)))).periods
    return AbbStr(prds)
end

export NewtonMethodIteration
function NewtonMethodIteration(; fixingmethod=:DefaultOrientation, parent::Int=0, nip=NIP)
    if fixingmethod == :DefaultOrientation
        fixed = DefaultOrientation
    elseif fixingmethod == :FixThreePoints
        fixed = FixThreePoints
    else
        error("No method for $(fixingmethod)")
    end
    parent=Parent(parent)
    M=loadM(index=parent)

    nโ,nโ=n=dim.(M.bsplinespaces)
    if !isodd(nโ*nโ)
        error("nโ and nโ should be odd numbers")
    end
    M=Positioning(M)
    M,F,Gฬ,ฮt=NewtonIteration(M,fixed,nip=nip)
    comment="Newton Iteration - residual norm: "*(@sprintf("%.4e",norm(F)))*", ฮa norm: "*(@sprintf("%.4e",norm(Gฬ)))*", computation time: "*SecondsToString(ฮt)
    Export(M,parent,comment=comment)
end

function NewtonIteration(M::BSplineManifold,fixed;nip=NIP)
    ๐=M.controlpoints
    Pโ,Pโ=P=M.bsplinespaces
    pโ,pโ=p=Pโ.degree,Pโ.degree
    kโ,kโ=k=Pโ.knots,Pโ.knots
    Dโ,Dโ=D=kโ[1+pโ]..kโ[end-pโ],kโ[1+pโ]..kโ[end-pโ]
    nโ,nโ=n=dim.(P)
    function lineup(Iโ::Int,Iโ::Int,i::Int)::Int
        return (i-1)*nโ*nโ+(Iโ-1)*nโ+(Iโ-1)+1
    end

    tโ=time()
    if distributed
        f=Array{Union{Future,Nothing}}(nothing,nโ,nโ,d)
        for Iโ โ 1:nโ, Iโ โ 1:nโ, i โ 1:d
            f[Iโ,Iโ,i]=@spawn elm_F(M,Iโ,Iโ,i,nip=nip)
        end
        h=Array{Union{Future,Nothing}}(nothing,nโ,nโ,d,nโ,nโ,d)
        for Iโ โ 1:nโ, Iโ โ 1:nโ, i โ 1:d, Rโ โ 1:nโ, Rโ โ 1:nโ, r โ 1:d
            if lineup(Iโ,Iโ,i) โค lineup(Rโ,Rโ,r)
                h[Iโ,Iโ,i,Rโ,Rโ,r]=h[Rโ,Rโ,r,Iโ,Iโ,i]=@spawn elm_H(M,Iโ,Iโ,i,Rโ,Rโ,r,nip=nip)
            end
        end
        F=fetch.(f)
        H=fetch.(h)
    else
        H=[elm_H(M,Iโ,Iโ,i,Rโ,Rโ,r,nip=nip) for Iโ โ 1:nโ, Iโ โ 1:nโ, i โ 1:d, Rโ โ 1:nโ, Rโ โ 1:nโ, r โ 1:d]
        F=[elm_F(M,Iโ,Iโ,i,nip=nip) for Iโ โ 1:nโ, Iโ โ 1:nโ, i โ 1:d]
    end
    tโ=time()

    ๐=nโ*nโ*d
    Fixed=sort(collect((i->lineup(i...)).(fixed(nโ,nโ))))
    Unfixed=deleteat!(collect(1:๐),Fixed)

    F=reshape(F,๐)
    H=reshape(H,๐,๐)
    a=aโ=reshape(๐,๐)
    Hฬ=H[Unfixed,Unfixed]
    aฬ=a[Unfixed]
    Fฬ=F[Unfixed]
    Gฬ=Hฬ\Fฬ
    aฬ=aฬ-Gฬ
    for i โ Fixed
        insert!(aฬ,i,aโ[i])
    end
    ๐=reshape(aฬ,nโ,nโ,d)
    M=BSplineManifold(P,๐)
    return (M,F,Gฬ,tโ-tโ)
end

function elm_H(M::BSplineManifold,Iโ,Iโ,i,Rโ,Rโ,r;nip=NIP)
    ๐=M.controlpoints
    Pโ,Pโ=P=M.bsplinespaces
    pโ,pโ=p=Pโ.degree,Pโ.degree
    kโ,kโ=k=Pโ.knots,Pโ.knots
    nโ,nโ=n=dim.(P)

    ๐น=[1.0 0.0;0.0 1.0]
    ฮฃโ=(maximum([Iโ,Rโ]):minimum([Iโ,Rโ])+pโ)
    ฮฃโ=(maximum([Iโ,Rโ]):minimum([Iโ,Rโ])+pโ)

    if length(ฮฃโ)==0 || length(ฮฃโ)==0
        return 0.0
    else
        return sum(GaussianQuadrature(
            u->(
                g=gโโโ(u);
                gโป=inv(g);
                ๐=sqrt(det(g));
                ๐=[Nโฒ(Pโ,Pโ,Iโ,Iโ,i,u) for Iโ โ 1:nโ, Iโ โ 1:nโ, i โ 1:d];
                Q=[sum(๐[Iโ,Iโ,i]*๐[Iโ,Iโ,j] for Iโ โ 1:nโ, Iโ โ 1:nโ) for i โ 1:d, j โ 1:d];
                sum(
                    C(p,q,m,n,gโป)*๐[Iโ,Iโ,p]*(๐น[i,r]*๐[Rโ,Rโ,q]*(sum(Q[o,m]*Q[o,n] for o โ 1:d)-g[m,n])+2*๐[Rโ,Rโ,n]*Q[i,q]*Q[r,m])
                for p โ 1:d, q โ 1:d, m โ 1:d, n โ 1:d)
            )*๐, kโ[ฮนโ]..kโ[ฮนโ+1], kโ[ฮนโ]..kโ[ฮนโ+1], nip=nip
        ) for ฮนโ โ ฮฃโ, ฮนโ โ ฮฃโ)
    end
end

function elm_F(M::BSplineManifold,Iโ,Iโ,i;nip=NIP)
    ๐=M.controlpoints
    Pโ,Pโ=P=M.bsplinespaces
    pโ,pโ=p=Pโ.degree,Pโ.degree
    kโ,kโ=k=Pโ.knots,Pโ.knots
    nโ,nโ=n=dim.(P)

    Dฬโ=BSplineSupport(Iโ,Pโ)
    Dฬโ=BSplineSupport(Iโ,Pโ)
    ฮฃโ=(Iโ:Iโ+pโ)
    ฮฃโ=(Iโ:Iโ+pโ)

    return sum(GaussianQuadrature(
        u->(
            g=gโโโ(u);
            gโป=inv(g);
            ๐=sqrt(det(g));
            ๐=[Nโฒ(Pโ,Pโ,Iโ,Iโ,i,u) for Iโ โ 1:nโ, Iโ โ 1:nโ, i โ 1:d];
            Q=[sum(๐[Iโ,Iโ,i]*๐[Iโ,Iโ,j] for Iโ โ 1:nโ, Iโ โ 1:nโ) for i โ 1:d, j โ 1:d];
            sum(
                sum(
                    C(p,q,m,n,gโป)*๐[Iโ,Iโ,p]*Q[i,q]
                    for p โ 1:d, q โ 1:d
                )*(sum(
                    Q[o,m]*Q[o,n]
                for o โ 1:d)-g[m,n])
            for m โ 1:d, n โ 1:d)
        )*๐,kโ[ฮนโ]..kโ[ฮนโ+1], kโ[ฮนโ]..kโ[ฮนโ+1],nip=nip
    ) for ฮนโ โ ฮฃโ, ฮนโ โ ฮฃโ)
end
