export PinState
function PinState(;parent::Int=0, tag::String="")
    if tag==""
        tag=Dates.format(now(),"yyyy-mm-dd_H-M-S")
    end
    CheckAsFineName(tag)
    parent=Parent(parent)
    M=loadM(index=parent)
    comment="üìå - tag: "*tag
    Export(M,parent,comment=comment)
end

function FindPinnedStates()
    dict=LoadResultDict()
    PinnedStates = String[]
    for i in keys(dict["Result"])
        comment = dict["Result"][i]["comment"]
        if startswith(comment, "üìå ")
            push!(PinnedStates,i)
        end
    end
    return PinnedStates
end

export ExportPinnedStates
function ExportPinnedStates(;unitlength=(10,"mm"),cutout=(0.1,5),mesh=60)
    mkpath(DIR*"/pinned")
    PinnedStates = FindPinnedStates()

    for i in PinnedStates
        index = parse(Int, i)

        M=loadM(index=index)
        BSplineSvg(M,filename=DIR*"/pinned/"*NAME*"-"*string(index)*"-final.svg",up=UP,down=DOWN,right=RIGHT,left=LEFT,mesh=MESH,unitlength=unitlength,points=false)

        P‚ÇÅ,P‚ÇÇ=P=M.bsplinespaces
        p‚ÇÅ,p‚ÇÇ=p=P‚ÇÅ.degree,P‚ÇÇ.degree
        k‚ÇÅ,k‚ÇÇ=k=P‚ÇÅ.knots,P‚ÇÇ.knots
        D‚ÇÅ,D‚ÇÇ=D=k‚ÇÅ[1+p‚ÇÅ]..k‚ÇÅ[end-p‚ÇÅ],k‚ÇÇ[1+p‚ÇÇ]..k‚ÇÇ[end-p‚ÇÇ]
        n‚ÇÅ,n‚ÇÇ=n=dim.(P)

        ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÅ(u)=normalize(ùíë‚ÇÅ‚Çç‚Çú‚Çé(M,u))
        ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÇ(u)=[0.0 -1.0;1.0 0.0]*ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÅ(u)
        ùíëa(i,t)=ùíë‚Çç‚Çú‚Çé(M,[t,leftendpoint(D‚ÇÇ)])+ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÇ([t,leftendpoint(D‚ÇÇ)])*i*cutout[1]/unitlength[1]
        ùíëb(i,t)=ùíë‚Çç‚Çú‚Çé(M,[t,rightendpoint(D‚ÇÇ)])-ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÇ([t,rightendpoint(D‚ÇÇ)])*i*cutout[1]/unitlength[1]
        SvgCurve([[t->ùíëa(i,t) for i ‚àà 0:cutout[2]]...,[t->ùíëb(i,t) for i ‚àà 0:cutout[2]]...],D‚ÇÅ,filename=DIR*"/pinned/"*NAME*"-"*string(index)*"-cutout.svg",up=UP,down=DOWN,right=RIGHT,left=LEFT,thickness=0.1,mesh=mesh,unitlength=unitlength)
    end

    return nothing
end

export FinalOutput
function FinalOutput(;index=0,unitlength=(10,"mm"),cutout=(0.1,5),mesh=60)
    M=loadM(index=index)
    BSplineSvg(M,filename=DIR*"/"*NAME*"-"*string(index)*"-final.svg",up=UP,down=DOWN,right=RIGHT,left=LEFT,mesh=MESH,unitlength=unitlength,points=false)

    P‚ÇÅ,P‚ÇÇ=P=M.bsplinespaces
    p‚ÇÅ,p‚ÇÇ=p=P‚ÇÅ.degree,P‚ÇÇ.degree
    k‚ÇÅ,k‚ÇÇ=k=P‚ÇÅ.knots,P‚ÇÇ.knots
    D‚ÇÅ,D‚ÇÇ=D=k‚ÇÅ[1+p‚ÇÅ]..k‚ÇÅ[end-p‚ÇÅ],k‚ÇÇ[1+p‚ÇÇ]..k‚ÇÇ[end-p‚ÇÇ]
    n‚ÇÅ,n‚ÇÇ=n=dim.(P)

    ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÅ(u)=normalize(ùíë‚ÇÅ‚Çç‚Çú‚Çé(M,u))
    ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÇ(u)=[0.0 -1.0;1.0 0.0]*ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÅ(M,u)
    ùíëa(i,t)=ùíë‚Çç‚Çú‚Çé(M,[t,leftendpoint(D‚ÇÇ)])+ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÇ([t,leftendpoint(D‚ÇÇ)])*i*cutout[1]/unitlength[1]
    ùíëb(i,t)=ùíë‚Çç‚Çú‚Çé(M,[t,rightendpoint(D‚ÇÇ)])-ùíÜ‚ÅΩ‚Å∞‚Åæ‚ÇÇ([t,rightendpoint(D‚ÇÇ)])*i*cutout[1]/unitlength[1]
    SvgCurve([[t->ùíëa(i,t) for i ‚àà 0:cutout[2]]...,[t->ùíëb(i,t) for i ‚àà 0:cutout[2]]...],D‚ÇÅ,filename=DIR*"/"*NAME*"-"*string(index)*"-cutout.svg",up=UP,down=DOWN,right=RIGHT,left=LEFT,thickness=0.1,mesh=mesh,unitlength=unitlength)

    if SLACK
        SlackFile(DIR*"/"*NAME*"-"*string(index)*"-final.svg")
        SlackFile(DIR*"/"*NAME*"-"*string(index)*"-cutout.svg")
    end

    return nothing
end
