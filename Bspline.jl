module Bspline

using IntervalSets
using Luxor
using ElementaryCalculus
import ParametricDraw.ChangeUnit
import ParametricDraw.B√©zPts
import ParametricDraw.LxrPt

export Bs1mfd, Bs2mfd, Bs, BÃás, Bsupp, BsCoef2, BsMapping, href, pref, BsDraw, BsWrite, BsRead

mutable struct Bs1mfd
    p::Int64
    k::Array{Float64,1}
    a::Array{Float64,2}
    function Bs1mfd(p,k,a)
        if (size(a)‚â†((length(k)-p-1),2))
            error("dim-error")
        elseif (!issorted(k))
            error("knots not sorted")
        else
            new(p,k,a)
        end
    end
end

mutable struct Bs2mfd
    p::Array{Int64,1}
    k::Array{Array{Float64,1},1}
    a::Array{Float64,3}
    function Bs2mfd(p,k,a)
        if (length(p)‚â†2)
            error("p-error")
        elseif (length(k)‚â†2)
            error("k-error")
        elseif (size(a)‚â†((length.(k)-p.-1)...,2))
            error("dim-error")
        elseif (!*(issorted.(k)...))
            error("knots not sorted")
        else
            new(p,k,a)
        end
    end
end

function Bs(i::Int64,p::Int64,k,t)::Float64
    if(p==0)
        return k[i]‚â§t<k[i+1]||(k[i]‚â†k[i+1]==k[end]==t)
    else
        return (((k[i+p]-k[i]‚â†0) ? Bs(i,p-1,k,t)*(t-k[i])/(k[i+p]-k[i]) : 0)
        +((k[i+p+1]-k[i+1]‚â†0) ? Bs(i+1,p-1,k,t)*(k[i+p+1]-t)/(k[i+p+1]-k[i+1]) : 0))
    end
end

function BÃás(i::Int64,p::Int64,k,t)::Float64
    return p*(((k[i+p]-k[i]‚â†0) ? Bs(i,p-1,k,t)/(k[i+p]-k[i]) : 0)
    -((k[i+p+1]-k[i+1]‚â†0) ? Bs(i+1,p-1,k,t)/(k[i+p+1]-k[i+1]) : 0))
end

function Bsupp(i,p,k)::ClosedInterval
    return k[i]..k[i+p+1]
end

function BsCoef2(f,p::Int64,k::Array{Float64,1};nip=25)
    n=length(k)-p-1
    A=[INT‚Çä(t->Bs(i,p,k,t)*Bs(j,p,k,t),Bsupp(i,p,k)‚à©Bsupp(j,p,k),nip=nip) for i ‚àà 1:n, j ‚àà 1:n]
    B=[INT(t->Bs(i,p,k,t)*f(t),Bsupp(i,p,k)) for i ‚àà 1:n]
    C=inv(A)*B
    return [C[I][i] for I ‚àà 1:n, i ‚àà 1:2]
end

function BsCoef2(f,p::Array{Int64,1},k::Array{Array{Float64,1},1};nip=25)
    n‚ÇÅ,n‚ÇÇ=n=length.(k)-p.-1
    p‚ÇÅ,p‚ÇÇ=p
    k‚ÇÅ,k‚ÇÇ=k
    A=reshape([INT2‚Çä(u->Bs(i‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(i‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*Bs(j‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(j‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2]),(Bsupp(i‚ÇÅ,p‚ÇÅ,k‚ÇÅ)‚à©Bsupp(j‚ÇÅ,p‚ÇÅ,k‚ÇÅ),Bsupp(i‚ÇÇ,p‚ÇÇ,k‚ÇÇ)‚à©Bsupp(j‚ÇÇ,p‚ÇÇ,k‚ÇÇ)),nip=nip) for i‚ÇÅ ‚àà 1:n‚ÇÅ, i‚ÇÇ ‚àà 1:n‚ÇÇ, j‚ÇÅ ‚àà 1:n‚ÇÅ, j‚ÇÇ ‚àà 1:n‚ÇÇ],n‚ÇÅ*n‚ÇÇ,n‚ÇÅ*n‚ÇÇ)
    B=reshape([INT2(u->Bs(i‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(i‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*f(u),(Bsupp(i‚ÇÅ,p‚ÇÅ,k‚ÇÅ),Bsupp(i‚ÇÇ,p‚ÇÇ,k‚ÇÇ))) for i‚ÇÅ ‚àà 1:n‚ÇÅ, i‚ÇÇ ‚àà 1:n‚ÇÇ],n‚ÇÅ*n‚ÇÇ)
    C=reshape(inv(A)*B,n‚ÇÅ,n‚ÇÇ)
    return [C[I‚ÇÅ,I‚ÇÇ][i] for I‚ÇÅ ‚àà 1:n‚ÇÅ, I‚ÇÇ ‚àà 1:n‚ÇÇ, i ‚àà 1:2]
end

# function BsCoef(f,p::Int64,k::Array{Float64,1})
#     n=length(k)-p-1
#     Œ∫=[((n+1-i)*k[i]+i*k[i+p+1])/(n+1) for i ‚àà 1:n]
#     [Bs(j,p,k,Œ∫[i]) for i ‚àà 1:n, j ‚àà 1:n]\map(f,Œ∫)
# end

# function BsCoef(f,p::Array{Int64,1},k::Array{Array{Float64,1},1})
#     n=length.(k).-p-1
#     d=length(p)
#     Œ∫=[[((n[j]+1-i)*k[j][i]+i*k[j][i+p[j]+1])/(n[j]+1) for i ‚àà 1:n[j]] for j ‚àà 1:d]
#     N=vcat([1],[prod(n[1:i]) for i ‚àà 1:d])
#     K=Array{Array{Float64,1},1}()
#     I=Array{Array{Int64,1},1}()
#     for i ‚àà 0:(N[end]-1)
#         ind=Array{Int64,1}()
#         k=0
#         for j ‚àà 1:d
#             k=mod((i-k)√∑N[j],n[j])
#             push!(ind,k+1)
#         end
#         push!(K,[Œ∫[i][ind[i]] for i ‚àà 1:d])
#         push!(I,[ind[i] for i ‚àà 1:d])
#     end
#
#     [prod(Bs(I[j][l],p[l],k[l],K[i]) for l ‚àà 1:d) for i ‚àà 1:N[end], j ‚àà 1:N[end]]\map(f,K)
# end

function BsMapping(B1::Bs1mfd,t)
    p=B1.p
    k=B1.k
    a=B1.a
    n=length(k)-p-1
    return sum(Bs(I,p,k,t)*a[I,:] for I ‚àà 1:n)
end

function BsMapping(B2::Bs2mfd,u)
    p‚ÇÅ,p‚ÇÇ=p=B2.p
    k‚ÇÅ,k‚ÇÇ=k=B2.k
    a=B2.a
    n‚ÇÅ,n‚ÇÇ=n=length.(k)-p.-1
    return sum(Bs(I‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(I‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*a[I‚ÇÅ,I‚ÇÇ,:] for I‚ÇÅ ‚àà 1:n‚ÇÅ, I‚ÇÇ ‚àà 1:n‚ÇÇ)
end

# function href(B2::Bs2mfd,k‚Çä::Array{Array{Float64,1},1})
#     p,k,a = B2.p,B2.k,B2.a
#     d=2
#     n=length.(k)-p.-1
#     p·µ£=p
#     k·µ£=[sort(convert(Array{Float64,1},vcat(k[l],k‚Çä[l]))) for l ‚àà 1:d]
#     n·µ£=length.(k·µ£)-p·µ£.-1
#     Œ∫=[[((n·µ£[l]+1-i)/(n·µ£[l]+1))*k·µ£[l][i]+((i)/(n·µ£[l]+1))*k·µ£[l][i+p·µ£[l]+1] for i ‚àà 1:n·µ£[l]] for l ‚àà 1:d]
#     C=[[Bs(i,p·µ£[l],k·µ£[l],Œ∫[l][j]) for j ‚àà 1:n·µ£[l], i ‚àà 1:n·µ£[l]] for l ‚àà 1:d]
#     D=[C[l]\[Bs(j,p[l],k[l],Œ∫[l][i]) for i ‚àà 1:n·µ£[l], j ‚àà 1:n[l]] for l ‚àà 1:d]
#     a·µ£=[sum(D[1][l‚ÇÅ,i‚ÇÅ]*D[2][l‚ÇÇ,i‚ÇÇ]*a[i‚ÇÅ,i‚ÇÇ,j] for i‚ÇÅ ‚àà 1:n[1], i‚ÇÇ ‚àà 1:n[2]) for l‚ÇÅ ‚àà 1:n·µ£[1], l‚ÇÇ ‚àà 1:n·µ£[2], j ‚àà 1:d]
#     return Bs2mfd(p·µ£,k·µ£,a·µ£)
# end
#
# function pref(B2::Bs2mfd,p‚Çä::Array{Int64,1})
#     p,k,a=B2.p,B2.k,B2.a
#     d=2
#     n=length.(k)-p.-1
#     p·µ£=p+p‚Çä
#     k‚Çä=[repeat(DelDpl(k[l]),inner=p‚Çä[l]) for l ‚àà 1:d]
#     k·µ£=[sort(convert(Array{Float64,1},vcat(k[l],k‚Çä[l]))) for l ‚àà 1:d]
#     n·µ£=length.(k·µ£)-p·µ£.-1
#     Œ∫=[[((n·µ£[l]+1-i)/(n·µ£[l]+1))*k·µ£[l][i]+((i)/(n·µ£[l]+1))*k·µ£[l][i+p·µ£[l]+1] for i ‚àà 1:n·µ£[l]] for l ‚àà 1:d]
#     C=[[Bs(i,p·µ£[l],k·µ£[l],Œ∫[l][j]) for j ‚àà 1:n·µ£[l], i ‚àà 1:n·µ£[l]] for l ‚àà 1:d]
#     D=[C[l]\[Bs(j,p[l],k[l],Œ∫[l][i]) for i ‚àà 1:n·µ£[l], j ‚àà 1:n[l]] for l ‚àà 1:d]
#     a·µ£=[sum(D[1][l‚ÇÅ,i‚ÇÅ]*D[2][l‚ÇÇ,i‚ÇÇ]*a[i‚ÇÅ,i‚ÇÇ,j] for i‚ÇÅ ‚àà 1:n[1], i‚ÇÇ ‚àà 1:n[2]) for l‚ÇÅ ‚àà 1:n·µ£[1], l‚ÇÇ ‚àà 1:n·µ£[2], j ‚àà 1:d]
#     return Bs2mfd(p·µ£,k·µ£,a·µ£)
# end

function href(B2::Bs2mfd,k‚Çä::Array{Array{Float64,1},1};nip=25)
    p,k,a = B2.p,B2.k,B2.a
    d=2
    n=length.(k)-p.-1
    p·µ£=p
    k·µ£=[sort(convert(Array{Float64,1},vcat(k[l],k‚Çä[l]))) for l ‚àà 1:d]
    a·µ£=BsCoef2(u->BsMapping(B2,u),p·µ£,k·µ£,nip=nip)
    return Bs2mfd(p·µ£,k·µ£,a·µ£)
end

function pref(B2::Bs2mfd,p‚Çä::Array{Int64,1};nip=25)
    p,k,a=B2.p,B2.k,B2.a
    d=2
    n=length.(k)-p.-1
    p·µ£=p+p‚Çä
    k‚Çä=[repeat(DelDpl(k[l]),inner=p‚Çä[l]) for l ‚àà 1:d]
    k·µ£=[sort(convert(Array{Float64,1},vcat(k[l],k‚Çä[l]))) for l ‚àà 1:d]
    a·µ£=BsCoef2(u->BsMapping(B2,u),p·µ£,k·µ£,nip=nip)
    return Bs2mfd(p·µ£,k·µ£,a·µ£)
end

function BsDraw(B1::Bs1mfd;filename="BsplineCurve.svg",up=5,down=-5,right=5,left=-5,zoom=1,unitlength=(100,"pt"),points=true)
    step, unit=(unitlength[1]*zoom,unitlength[2])
    Drawing(step*(right-left),step*(up-down),filename)

    Luxor.origin(-step*left,step*up)
    setline(zoom)
    background("white")

    p=B1.p
    k=B1.k
    a=B1.a
    n=length(k)-p-1
    ùíë(t)=BsMapping(B1,t)

    K=DelDpl(k[1+p:end-p])
    N=length(K)-1

    sethue("red")
    drawbezierpath(BezierPath([BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(ùíë,K[i],K[i+1]))...) for i ‚àà 1:N]),:stroke)

    if (points)
        sethue("black")
        setline(zoom)
        CtrlPts=[LxrPt(a[i,:],step) for i ‚àà 1:size(a)[1]]
        map(p->circle(p,3*zoom,:fill), CtrlPts)
        poly(CtrlPts[:], :stroke)
    end

    finish()
    ChangeUnit(filename,"pt",unit)
    return nothing
end

function BsDraw(B2::Bs2mfd;filename="BsplineSurface.svg",up=5,down=-5,right=5,left=-5,zoom=1,mesh=(10,10),unitlength=(100,"pt"),points=true)
    step, unit=(unitlength[1]*zoom,unitlength[2])
    Drawing(step*(right-left),step*(up-down),filename)

    Luxor.origin(-step*left,step*up)
    setline(zoom)
    background("white")

    p‚ÇÅ,p‚ÇÇ=p=B2.p
    k‚ÇÅ,k‚ÇÇ=k=B2.k
    a=B2.a
    n‚ÇÅ,n‚ÇÇ=n=length.(k)-p.-1
    ùíë(u)=BsMapping(B2,u)

    K‚ÇÅ,K‚ÇÇ=K=[DelDpl(k[i][1+p[i]:end-p[i]]) for i ‚àà 1:2]
    N‚ÇÅ,N‚ÇÇ=length.(K).-1
    m‚ÇÅ,m‚ÇÇ=mesh

    sethue(1,.5,.5)
    drawbezierpath(BezierPath(vcat(
        [BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÅ->ùíë([u‚ÇÅ,K‚ÇÇ[1]]),K‚ÇÅ[i],K‚ÇÅ[i+1]))...) for i ‚àà 1:N‚ÇÅ],
        [BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÇ->ùíë([K‚ÇÅ[end],u‚ÇÇ]),K‚ÇÇ[i],K‚ÇÇ[i+1]))...) for i ‚àà 1:N‚ÇÇ],
        [BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÅ->ùíë([u‚ÇÅ,K‚ÇÇ[end]]),K‚ÇÅ[end-i+1],K‚ÇÅ[end-i]))...) for i ‚àà 1:N‚ÇÅ],
        [BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÇ->ùíë([K‚ÇÅ[1],u‚ÇÇ]),K‚ÇÇ[end-i+1],K‚ÇÇ[end-i]))...) for i ‚àà 1:N‚ÇÇ]
    )),:fill,close=true)

    sethue("red")
    for u‚ÇÅ ‚àà range(K‚ÇÅ[1],stop=K‚ÇÅ[end],length=m‚ÇÅ+1)
        drawbezierpath(BezierPath([BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÇ->ùíë([u‚ÇÅ,u‚ÇÇ]),K‚ÇÇ[i],K‚ÇÇ[i+1]))...) for i ‚àà 1:N‚ÇÇ]),:stroke)
    end
    for u‚ÇÇ ‚àà range(K‚ÇÇ[1],stop=K‚ÇÇ[end],length=m‚ÇÇ+1)
        drawbezierpath(BezierPath([BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÅ->ùíë([u‚ÇÅ,u‚ÇÇ]),K‚ÇÅ[i],K‚ÇÅ[i+1]))...) for i ‚àà 1:N‚ÇÅ]),:stroke)
    end

    if (points)
        sethue("black")
        setline(zoom)
        CtrlPts=[LxrPt(a[i,j,:],step) for i ‚àà 1:size(a)[1], j ‚àà 1:size(a)[2]]
        map(p->circle(p,3*zoom,:fill), CtrlPts)
        for i ‚àà 1:n‚ÇÅ
            poly(CtrlPts[i,:], :stroke)
        end
        for j ‚àà 1:n‚ÇÇ
            poly(CtrlPts[:,j], :stroke)
        end
    end

    finish()
    ChangeUnit(filename,"pt",unit)
    return nothing
end

# function BsWrite(B2::Bs2mfd,i::Int64;filename="BsplineData.h5")
#     #ShapeName
#     p=B2.p
#     k‚ÇÅ,k‚ÇÇ=B2.k
#     a=B2.a
#     h5write(filename,"p-"*string(i),p)
#     h5write(filename,"k‚ÇÅ-"*string(i),k‚ÇÅ)
#     h5write(filename,"k‚ÇÇ-"*string(i),k‚ÇÇ)
#     h5write(filename,"a-"*string(i),a)
#     return nothing
# end
#
# function BsRead(i::Int64;filename="BsplineData.h5")
#     p=h5read(filename,"p-"*string(i))
#     k‚ÇÅ=h5read(filename,"k‚ÇÅ-"*string(i))
#     k‚ÇÇ=h5read(filename,"k‚ÇÇ-"*string(i))
#     a=h5read(filename,"a-"*string(i))
#     return Bs2mfd(p,[k‚ÇÅ,k‚ÇÇ],a)
# end

end
