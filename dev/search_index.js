var documenterSearchIndex = {"docs":
[{"location":"craft/#craft","page":"Craft","title":"Craft","text":"","category":"section"},{"location":"craft/#Question:-How-can-I-make-the-model?","page":"Craft","title":"Question: How can I make the model?","text":"","category":"section"},{"location":"craft/","page":"Craft","title":"Craft","text":"You can:","category":"page"},{"location":"craft/","page":"Craft","title":"Craft","text":"Download a paraboloid example or a hyperbolic paraboloid example from my paper on arXiv, and cut by scissors.\nIt would be hard, but not impossible.\nDownload a paraboloid example or a hyperbolic paraboloid example from my paper on arXiv, and cut by laser cutting machine.\nI'm using Beambox by FLUX.inc.\nCompute the shape of paper strip, instead of downloading the paraboloid.\nThis needs setup for Julia environment.\nBuy already cut pieces of paper at Booth (In preparation).\nShips from Japan.","category":"page"},{"location":"craft/#Images-during-the-making-process","page":"Craft","title":"Images during the making process","text":"","category":"section"},{"location":"craft/","page":"Craft","title":"Craft","text":"(Image: ) (Image: )","category":"page"},{"location":"theory/#Theoretical-framework","page":"Theoretical Framework","title":"Theoretical framework","text":"","category":"section"},{"location":"theory/","page":"Theoretical Framework","title":"Theoretical Framework","text":"Our theoretical framework is based on the following:","category":"page"},{"location":"theory/","page":"Theoretical Framework","title":"Theoretical Framework","text":"Mathematical model: Nonlinear elasticity on Riemannian manifold\nGeometric representation: B-spline manifold\nNumerical analysis: Galerkin method, Newton-Raphson method","category":"page"},{"location":"theory/","page":"Theoretical Framework","title":"Theoretical Framework","text":"For more information, read our paper! If you have any questions, feel free to contact me on Twitter!","category":"page"},{"location":"run-julia/#numerical_computation","page":"Numerical computation","title":"Numerical computation","text":"","category":"section"},{"location":"run-julia/#Installation","page":"Numerical computation","title":"Installation","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"On Julia's package mode, run the following commands.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"pkg> add IntervalSets\npkg> add StaticArrays\npkg> add BasicBSpline\npkg> add https://github.com/hyrodium/BasicBSplineExporter.jl\npkg> add https://github.com/hyrodium/ElasticSurfaceEmbedding.jl","category":"page"},{"location":"run-julia/#Overview-of-our-method","page":"Numerical computation","title":"Overview of our method","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"The computation process proceeds as shown in the following flowchart (from our paper):","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"(Image: )","category":"page"},{"location":"run-julia/#Example:-Paraboloid","page":"Numerical computation","title":"Example: Paraboloid","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"Through this section, we treat a paraboloid z=x^2+y^2 as an example.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"(Image: )","category":"page"},{"location":"run-julia/#Load-packages,-and-optional-configuration","page":"Numerical computation","title":"Load packages, and optional configuration","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"Load packages with the following script.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"using IntervalSets\nusing BasicBSpline\nusing StaticArrays\nusing ElasticSurfaceEmbedding","category":"page"},{"location":"run-julia/#Define-the-shape-of-surface","page":"Numerical computation","title":"Define the shape of surface","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"ElasticSurfaceEmbedding.ùíë‚Çç‚ÇÄ‚Çé(u¬π,u¬≤) = SVector(u¬π, u¬≤, u¬π^2+u¬≤^2)","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"beginaligned\nbmp_0(u^1 u^2)\n= beginpmatrix\nu^1 \nu^2 \n(u^1)^2 + (u^2)^2\nendpmatrix \nD\n= -11times-11\nendaligned","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"info: Direction of the surface\nIn the next step, we will split the surface into elongated strips. The domain of each strip should be rectangular, and the longer direction is u¬π, and the shorter direction is u¬≤. The paraboloid has four‚Äêfold symmetry, so we don't have to take care of it.","category":"page"},{"location":"run-julia/#Split-the-surface-into-strips","page":"Numerical computation","title":"Split the surface into strips","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"The domain D will be split into D_i.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"beginaligned\nD_i\n= -11timesleftfraci-110fraci10right  (i=1dots10)\nendaligned","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"(Image: )","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"In julia script, just define a domain of the strip with function D(i,n).","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"n = 10\nD(i,n) = (-1.0..1.0, (i-1)/n..i/n)","category":"page"},{"location":"run-julia/#Check-the-strain-prediction","page":"Numerical computation","title":"Check the strain prediction","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"Before computing the embedding numerically, we can predict the strain with Strain Approximation Formula:","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"beginaligned\nE_11^langle 0rangleapproxfrac12K_0B^2left(r^2-frac13right)\nendaligned","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"show_strain","category":"page"},{"location":"run-julia/#ElasticSurfaceEmbedding.show_strain","page":"Numerical computation","title":"ElasticSurfaceEmbedding.show_strain","text":"show_strain(D; index=0)\n\nShow the predicted maximum strain and, if possible, also the computed strain with the given index.\n\n\n\n\n\n","category":"function"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"for i in 1:n\n    show_strain(D(i,n))\nend","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"tip: Allowable strain\nPositive number means tension, and negative number means compression. Empirically, it is better if the absolute value of strain is smaller than 001 (=1).","category":"page"},{"location":"run-julia/#Initial-state","page":"Numerical computation","title":"Initial state","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"If you finished checking the strain prediction, the next step is determination of the initial state.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"initial_state\ninitial_state!","category":"page"},{"location":"run-julia/#ElasticSurfaceEmbedding.initial_state","page":"Numerical computation","title":"ElasticSurfaceEmbedding.initial_state","text":"initial_state(D; n‚ÇÅ = 15)\n\nCompute the initial state, by solving a ODE of center curve.\n\n\n\n\n\n","category":"function"},{"location":"run-julia/#ElasticSurfaceEmbedding.initial_state!","page":"Numerical computation","title":"ElasticSurfaceEmbedding.initial_state!","text":"initial_state!(allsteps, D; n‚ÇÅ = 15)\n\nCompute the initial state, by solving a ODE of center curve.\n\n\n\n\n\n","category":"function"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"From this section, the computing is done for each piece of the surface. First, let's calculate for i=1.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"i = 1","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"As a first step, let's compute the initial state.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"allsteps = initial_state(D(i,n), n‚ÇÅ=19)","category":"page"},{"location":"run-julia/#Newton-Raphson-method-iteration","page":"Numerical computation","title":"Newton-Raphson method iteration","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"newton_onestep!(allsteps, fixingmethod=:fix3points)\nnewton_onestep!(allsteps)","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"You can choose the fixing method from below:","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":":default (default)\n:fix3points","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"newton_onestep!","category":"page"},{"location":"run-julia/#ElasticSurfaceEmbedding.newton_onestep!","page":"Numerical computation","title":"ElasticSurfaceEmbedding.newton_onestep!","text":"newton_onestep(allsteps; fixingmethod=:default, parent::Int=0)\n\nCompute one step of Newton-Raphson method\n\n\n\n\n\n","category":"function"},{"location":"run-julia/#Refinement-of-B-spline-manifold","page":"Numerical computation","title":"Refinement of B-spline manifold","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"refinement!","category":"page"},{"location":"run-julia/#ElasticSurfaceEmbedding.refinement!","page":"Numerical computation","title":"ElasticSurfaceEmbedding.refinement!","text":"refinement!(allsteps; p‚Çä::Tuple{Int,Int}=(0, 0), k‚Çä::Tuple{AbstractKnotVector,AbstractKnotVector}=(EmptyKnotVector(),EmptyKnotVector()), parent::Int=0)\n\nCompute a refinement of the B-spline manifold\n\n\n\n\n\n","category":"function"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"refinement!(allsteps, p‚Çä=(0,1),k‚Çä=(EmptyKnotVector(),KnotVector([(i-1/2)/10])))","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"The knotvector to be inserted in refinement! can be suggested by show_knotvector function.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"show_knotvector","category":"page"},{"location":"run-julia/#ElasticSurfaceEmbedding.show_knotvector","page":"Numerical computation","title":"ElasticSurfaceEmbedding.show_knotvector","text":"show_knotvector(; index=0)\n\nShow current knotvector and suggestions for knot insertions (with given index).\n\n\n\n\n\n","category":"function"},{"location":"run-julia/#Pin-the-state","page":"Numerical computation","title":"Pin the state","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"If you finished computing for the strip, it's time to pin the state. This pinüìå will be used for the next final step.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"pin","category":"page"},{"location":"run-julia/#ElasticSurfaceEmbedding.pin","page":"Numerical computation","title":"ElasticSurfaceEmbedding.pin","text":"pin(allsteps; parent::Int = 0)\n\nAdd a pin üìå for the given index\n\n\n\n\n\n","category":"function"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"pin(allsteps, result)","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"If you add a pin mistakenly, you can remove the pin with remove_pin function.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"unpin(result, 10)","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"unpin","category":"page"},{"location":"run-julia/#ElasticSurfaceEmbedding.unpin","page":"Numerical computation","title":"ElasticSurfaceEmbedding.unpin","text":"unpin(allsteps; index::Integer)\n\nRemeve the pin üìå with the given index\n\n\n\n\n\n","category":"function"},{"location":"run-julia/#Export-all-pinned-shapes","page":"Numerical computation","title":"Export all pinned shapes","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"This is the final step of the computational process.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"export_pinned_steps","category":"page"},{"location":"run-julia/#ElasticSurfaceEmbedding.export_pinned_steps","page":"Numerical computation","title":"ElasticSurfaceEmbedding.export_pinned_steps","text":"export_pinned_steps(; unitlength = (10, \"mm\"), cutout = (0.1, 5), mesh::Int = 60)\n\nExport all pinned states for final output\n\n\n\n\n\n","category":"function"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"This will create SVG files in ~/ElasticSurfaceEmbedding-Result/Paraboloid/pinned/.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"You can edit these files, and craft them into curved surface shape.","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"(Image: )","category":"page"},{"location":"run-julia/#Utilities","page":"Numerical computation","title":"Utilities","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"If you want to resume the computation, you can just call settings like this:","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"settings(\"Paraboloid\")","category":"page"},{"location":"run-julia/#Other-examples","page":"Numerical computation","title":"Other examples","text":"","category":"section"},{"location":"run-julia/#Catenoid","page":"Numerical computation","title":"Catenoid","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"(Image: )","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"## Load packages\nusing IntervalSets\nusing BasicBSpline\nusing StaticArrays\nusing ElasticSurfaceEmbedding\n\n## Set parametric mapping (x-direction)\nElasticSurfaceEmbedding.ùíë‚Çç‚ÇÄ‚Çé(u¬π,u¬≤) = SVector(cos(u¬≤)*cosh(u¬π),sin(u¬≤)*cosh(u¬π),u¬π)\nn=9\nDx(n) = (-œÄ/2..œÄ/2,-œÄ/(4n)..œÄ/(4n))\n\n## Check the maximum strain\nshow_strain(Dx(n))\n\n## Numerical computing\ninitial_state(Dx(n), n‚ÇÅ=19)\nnewton_onestep(fixingmethod=:fix3points)\nnewton_onestep()\nnewton_onestep()\nrefinement!(p‚Çä=(0,1),k‚Çä=(EmptyKnotVector(),KnotVector(0)))\nnewton_onestep()\nnewton_onestep()\nnewton_onestep()\nadd_pin(tag=\"$name\")\nexport_pinned_steps(unitlength=(30,\"mm\"))\n\n\n## Set parametric mapping (y-direction)\nElasticSurfaceEmbedding.ùíë‚Çç‚ÇÄ‚Çé(u¬π,u¬≤) = SVector(cos(u¬π)*cosh(u¬≤),sin(u¬π)*cosh(u¬≤),u¬≤)\nn=9\nDy(i,n) = (-œÄ..œÄ,(i-1)*œÄ/(2n)..(i)*œÄ/(2n))\n\n## Check the maximum strain\nfor i in 1:9\n    show_strain(Dy(i,n))\nend\n\n## Numerical computing\nfor i in 1:9\n    initial_state(Dy(i,n), n‚ÇÅ=19)\n    newton_onestep(fixingmethod=:fix3points)\n    newton_onestep()\n    newton_onestep()\n    refinement!(p‚Çä=(0,1),k‚Çä=(EmptyKnotVector(),KnotVector((i-1/2)*œÄ/(2n))))\n    newton_onestep()\n    newton_onestep()\n    newton_onestep()\n    add_pin(tag=\"$name-$i\")\nend\nexport_pinned_steps(unitlength=(30,\"mm\"))","category":"page"},{"location":"run-julia/#Helicoid","page":"Numerical computation","title":"Helicoid","text":"","category":"section"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"(Image: )","category":"page"},{"location":"run-julia/","page":"Numerical computation","title":"Numerical computation","text":"## Load packages\nusing IntervalSets\nusing BasicBSpline\nusing StaticArrays\nusing ElasticSurfaceEmbedding\n\n## Set parametric mapping (x-direction)\nElasticSurfaceEmbedding.ùíë‚Çç‚ÇÄ‚Çé(u¬π,u¬≤) = SVector(cos(u¬≤)*sinh(u¬π),sin(u¬≤)*sinh(u¬π),u¬≤)\nn=9\nDx(n) = (-œÄ/2..œÄ/2,-œÄ/(4n)..œÄ/(4n))\n\nname = \"Helicoid-x\"\nsettings(name,canvas=(8,8),mesh=(18,1),unit=200,colorbarsize=0.3)\n\n## Check the maximum strain\nshow_strain(Dx(n))\n\n## Numerical computing\ninitial_state(Dx(n), n‚ÇÅ=19)\nnewton_onestep(fixingmethod=:fix3points)\nnewton_onestep()\nnewton_onestep()\nrefinement!(p‚Çä=(0,1),k‚Çä=(EmptyKnotVector(),KnotVector(0)))\nnewton_onestep()\nnewton_onestep()\nnewton_onestep()\nadd_pin(tag=\"$name\")\nexport_pinned_steps(unitlength=(30,\"mm\"))\n\n\n## Set parametric mapping (y-direction)\nElasticSurfaceEmbedding.ùíë‚Çç‚ÇÄ‚Çé(u¬π,u¬≤) = SVector(cos(u¬π)*sinh(u¬≤),sin(u¬π)*sinh(u¬≤),u¬π)\nn=9\nDy(i,n) = (-œÄ..œÄ,(i-1)*œÄ/(2n)..(i)*œÄ/(2n))\n\nname = \"Helicoid-y\"\nsettings(name,canvas=(8,8),mesh=(36,1),unit=200,colorbarsize=0.3)\n\n## Check the maximum strain\nfor i in 1:9\n    show_strain(Dy(i,n))\nend\n\n## Numerical computing\nfor i in 1:9\n    initial_state(Dy(i,n), n‚ÇÅ=19)\n    newton_onestep(fixingmethod=:fix3points)\n    newton_onestep()\n    newton_onestep()\n    refinement!(p‚Çä=(0,1),k‚Çä=(EmptyKnotVector(),KnotVector((i-1/2)*œÄ/(2n))))\n    newton_onestep()\n    newton_onestep()\n    newton_onestep()\n    add_pin(tag=\"$name-$i\")\nend\nexport_pinned_steps(unitlength=(30,\"mm\"))","category":"page"},{"location":"gallery/#Gallery","page":"Gallery","title":"Gallery","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"Notice: If you made a surface with this repository, I'd like to add pictures of your work here! Feel free to contact me or open pull requests, thanks!","category":"page"},{"location":"gallery/#Paraboloid","page":"Gallery","title":"Paraboloid","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"(Image: )","category":"page"},{"location":"gallery/#Catenoid-and-Helicoid","page":"Gallery","title":"Catenoid and Helicoid","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"(Image: )","category":"page"},{"location":"gallery/#Hyperbolic-Paraboloid","page":"Gallery","title":"Hyperbolic Paraboloid","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"(TBD)","category":"page"},{"location":"gallery/#Clock","page":"Gallery","title":"Clock","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"(TBD)","category":"page"},{"location":"gallery/#Torus","page":"Gallery","title":"Torus","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"(TBD)","category":"page"},{"location":"#Elastic-Surface-Embedding","page":"Home","title":"Elastic Surface Embedding","text":"","category":"section"},{"location":"#TL;DR","page":"Home","title":"TL;DR","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can make a holdable smooth surface model with this repository.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main part of this project is how to determine a planer shape from a strip on curved surface. In mathematics, this mapping is called \"embedding\". We determined the embedding by minimizing its elastic strain energy. This is the meaning of \"Elastic Surface Embedding\".","category":"page"},{"location":"#Overview:-How-to-make-a-surface-model","page":"Home","title":"Overview: How to make a surface model","text":"","category":"section"},{"location":"#step-1-:-Define-a-shape-of-surface-(and-split-into-strips)","page":"Home","title":"step 1 : Define a shape of surface (and split into strips)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The definition must consists of parametric mapping and its domain. For example, a paraboloid can be parametrized as below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginaligned\nbmp_0(u^1 u^2)\n= beginpmatrix\nu^1 \nu^2 \n(u^1)^2 + (u^2)^2\nendpmatrix \nD\n= -11times-11\nendaligned","category":"page"},{"location":"","page":"Home","title":"Home","text":"The domain D will be split into D_i.","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginaligned\nD_i\n= -11timesleftfraci-110fraci10right  (i=1dots10)\nendaligned","category":"page"},{"location":"#step-2-:-Numerical-analysis","page":"Home","title":"step 2 : Numerical analysis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the main part. Split the surface into pieces, and compute the Eucledian embedding. For more information, read numerical computation section. The image below is a result for the domain D_1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#step-3-:-Edit-on-vector-graphics-editor","page":"Home","title":"step 3 : Edit on vector graphics editor","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The output files are SVG format. After editing the svg files, you can print the graphics or cut papers by laser cutting machine.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#step-4-:-Craft-a-paper-model","page":"Home","title":"step 4 : Craft a paper model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the final step. Cut papers into strips, and weave them into surface.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Directions:-If-you-like..","page":"Home","title":"Directions: If you like..","text":"","category":"section"},{"location":"#..making-crafts","page":"Home","title":"..making crafts ‚úÇÔ∏è","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<div style=\"display:table;  width:100%;\">\n    <div style=\"display:table-cell; width:160px;\">\n        <img src=\"img/craft_thumbnail.png\">\n    </div>\n    <div style=\"display:table-cell; vertical-align:middle;\">\n        Download and print a paraboloid example or a hyperbolic paraboloid example from <a href=\"https://arxiv.org/abs/2211.06372\">my paper on arXiv</a>, and <a href=\"../craft\">make your own surface model</a>.\n        Laser cutting machine is useful, but it's not necessary.\n    </div>\n</div>","category":"page"},{"location":"#..computing","page":"Home","title":"..computing üíª","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<div style=\"display:table;  width:100%;\">\n    <div style=\"display:table-cell; width:160px;\">\n        <img src=\"img/juliawolfram_thumbnail.png\">\n    </div>\n    <div style=\"display:table-cell; vertical-align:middle;\">\n        Clone this repository, and run <a href=\"../run-julia\">the Julia script</a> or <a href=\"../run-wolfram\">the Wolfram script</a>!\n        Any issues and pull requests are welcomed.\n    </div>\n</div>","category":"page"},{"location":"#..mathematics-or-physics","page":"Home","title":"..mathematics or physics üåê","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<div style=\"display:table;  width:100%;\">\n    <div style=\"display:table-cell; width:160px;\">\n        <img src=\"img/math_thumbnail.png\">\n    </div>\n    <div style=\"display:table-cell; vertical-align:middle;\">\n        Read <a href=\"https://arxiv.org/abs/2211.06372\">my paper on arXiv</a>. Here's our theoretical framework:\n        <ul>\n            <li>Mathematical model: <a href=\"https://www.sciencedirect.com/topics/engineering/geometric-nonlinearity\">Nonlinear elasticity</a> on <a href=\"https://en.m.wikipedia.org/wiki/Riemannian_manifold\">Riemannian manifold</a></li>\n            <li>Geometric representation: <a href=\"https://en.wikipedia.org/wiki/Non-uniform_rational_B-spline\">B-spline manifold</a></li>\n            <li>Numerical analysis: <a href=\"https://en.wikipedia.org/wiki/Galerkin_method\">Galerkin method</a>, <a href=\"https://en.wikipedia.org/wiki/Newton%27s_method\">Newton-Raphson method</a></li>\n        </ul>\n    </div>\n</div>","category":"page"},{"location":"#..me!","page":"Home","title":"..me! üê¢","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<div style=\"display:table;  width:100%;\">\n    <div style=\"display:table-cell; width:160px;\">\n        <img src=\"img/me_thumbnail.jpg\">\n    </div>\n    <div style=\"display:table-cell; vertical-align:middle;\">\n        <ul>\n            <li>Follow <a href=\"https://twitter.com/Hyrodium\">my twitter account</a>!</li>\n            <li>Visit <a href=\"https://hyrodium.github.io/\">my website</a>!</li>\n            <li>Read <a href=\"https://arxiv.org/abs/2211.06372\">my paper on arXiv</a>!</li>\n            <li>Give star to <a href=\"https://github.com/hyrodium/ElasticSurfaceEmbedding.jl\">this repository</a>!</li>\n        </ul>\n    </div>\n</div>","category":"page"},{"location":"run-wolfram/#symbolic_computation","page":"Symbolic computation","title":"Symbolic computation","text":"","category":"section"},{"location":"run-wolfram/","page":"Symbolic computation","title":"Symbolic computation","text":"The wolfram code in this repository is for the proof of the main theorem of my paper. So, if you just want to make a surface model, you can skip this part.","category":"page"},{"location":"run-wolfram/#Installation","page":"Symbolic computation","title":"Installation","text":"","category":"section"},{"location":"run-wolfram/","page":"Symbolic computation","title":"Symbolic computation","text":"Wolfram Engine\nWolfram Language kernel for Jupyter notebooks","category":"page"},{"location":"run-wolfram/","page":"Symbolic computation","title":"Symbolic computation","text":"Clone my wolfram scripts from ElasticSurfaceEmbedding-wolfram.","category":"page"},{"location":"run-wolfram/#Overview","page":"Symbolic computation","title":"Overview","text":"","category":"section"},{"location":"run-wolfram/","page":"Symbolic computation","title":"Symbolic computation","text":"The main topic of this page is to give a proof of the main theorem of our thesis.","category":"page"},{"location":"run-wolfram/","page":"Symbolic computation","title":"Symbolic computation","text":"[Main theorem here]","category":"page"},{"location":"run-wolfram/","page":"Symbolic computation","title":"Symbolic computation","text":"The proof is too hard to calculate by hand, so we wrote code to solve this problem by Wolfram language.","category":"page"},{"location":"run-wolfram/#How-to-use","page":"Symbolic computation","title":"How to use","text":"","category":"section"},{"location":"run-wolfram/","page":"Symbolic computation","title":"Symbolic computation","text":"There are two ipynb files for the main theorem:","category":"page"},{"location":"run-wolfram/","page":"Symbolic computation","title":"Symbolic computation","text":"MainTheorem (simplified by Navier-Bernoulli hypothesis).ipynb   Easy, but incomplete because its hypothesis is too strong.\nMainTheorem (general).ipynb   Difficult, but complete proof.","category":"page"},{"location":"run-wolfram/#Simplified","page":"Symbolic computation","title":"Simplified","text":"","category":"section"},{"location":"run-wolfram/","page":"Symbolic computation","title":"Symbolic computation","text":"[mathematical expression here]","category":"page"},{"location":"run-wolfram/#General","page":"Symbolic computation","title":"General","text":"","category":"section"},{"location":"run-wolfram/","page":"Symbolic computation","title":"Symbolic computation","text":"[mathematical expression here]","category":"page"}]
}
