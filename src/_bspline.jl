function _arrayofvector2array(a::AbstractArray{SVector{2,Float64},2})
    n1, n2 = size(a)
    a_2dim = [a[i1, i2][j] for i1 in 1:n1, i2 in 1:n2, j in 1:2]
    return a_2dim
end

function _array2arrayofvector(a::Array{<:Real,3})
    n1, n2 = size(a)
    a_vec = [SVector{2}(a[i1, i2, :]) for i1 in 1:n1, i2 in 1:n2]
    return a_vec
end

"""
Affine transform of control points.
"""
function _affine(ùíÇ::Matrix{<:SVector}, A::SMatrix{2,2}, b::SVector{2})
    # x'=Ax+b
    n‚ÇÅ, n‚ÇÇ = size(ùíÇ)
    return [(A * ùíÇ[I‚ÇÅ, I‚ÇÇ] + b) for I‚ÇÅ in 1:n‚ÇÅ, I‚ÇÇ in 1:n‚ÇÇ]
end

function _rotate(ùíÇ::Matrix{<:SVector})
    n‚ÇÅ, n‚ÇÇ = size(ùíÇ)
    ind0 = [(n‚ÇÅ + 1) √∑ 2, (n‚ÇÇ + 1) √∑ 2]
    ind1 = ind0 - [0, 1]
    v = ùíÇ[ind1...] - ùíÇ[ind0...]
    R = -(@SMatrix [v[2] -v[1]; v[1] v[2]]) / norm(v)
    return _affine(ùíÇ, R, SVector(0.0, 0.0))
end

function _center(ùíÇ::Matrix{<:SVector})
    xs = [p[1] for p in ùíÇ]
    ys = [p[2] for p in ùíÇ]
    x_min = minimum(xs)
    x_max = maximum(xs)
    y_min = minimum(ys)
    y_max = maximum(ys)
    x = (x_min + x_max) / 2
    y = (y_min + y_max) / 2
    return _affine(ùíÇ, one(SMatrix{2,2}), -SVector(x, y))
end

function _positioning(ùíÇ::Matrix{<:SVector})
    return _center(_rotate(ùíÇ))
end

function _positioning(M::BSplineManifold{2})
    Ps = bsplinespaces(M)
    ùíÇ = controlpoints(M)
    ùíÇ‚Ä≤ = _positioning(ùíÇ)
    return BSplineManifold(ùíÇ‚Ä≤, Ps)
end

"""
    refinement!(steptree; p‚Çä::Tuple{Int,Int}=(0, 0), k‚Çä::Tuple{AbstractKnotVector,AbstractKnotVector}=(EmptyKnotVector(),EmptyKnotVector()), parent::Int=0)

Compute a refinement of the B-spline manifold
"""
function refinement!(steptree, parent::Int = 0; p‚Çä = (0, 0), k‚Çä = (EmptyKnotVector(), EmptyKnotVector()))
    parent = _validindex(steptree, parent)
    M = loadM(steptree, index = parent)

    P‚ÇÅ, P‚ÇÇ = bsplinespaces(M)
    k‚ÇÅ, k‚ÇÇ = knotvector(P‚ÇÅ), knotvector(P‚ÇÇ)

    p‚Çä‚ÇÅ, p‚Çä‚ÇÇ = p‚Çä
    k‚Çä‚ÇÅ, k‚Çä‚ÇÇ = k‚Çä

    if !iszero(k‚Çä‚ÇÅ) && !(k‚ÇÅ[1] < k‚Çä‚ÇÅ[1] && k‚Çä‚ÇÅ[end] < k‚ÇÅ[end])
        error("given additional knots for refinement are out of range")
    end

    if !iszero(k‚Çä‚ÇÇ) && !(k‚ÇÇ[1] < k‚Çä‚ÇÇ[1] && k‚Çä‚ÇÇ[end] < k‚ÇÇ[end])
        error("given additional knots for refinement are out of range")
    end

    comment = "Refinement - p‚Çä:$((p‚Çä‚ÇÅ, p‚Çä‚ÇÇ)), k‚Çä:$((BasicBSpline._vec(k‚Çä‚ÇÅ), BasicBSpline._vec(k‚Çä‚ÇÇ)))"
    comment = replace(comment, "Float64" => "")
    M = refinement_I(M, (Val(p‚Çä‚ÇÅ), Val(p‚Çä‚ÇÇ)), (k‚Çä‚ÇÅ, k‚Çä‚ÇÇ))
    info = Dict(["type" => "refinement"])
    step = Step(M, comment, info)
    addstep!(steptree, step, parent)
end

function suggest_knotvector(steptree; index=0)
    M = loadM(steptree, index = index)

    P = bsplinespaces(M)
    k‚ÇÅ, k‚ÇÇ = knotvector.(P)
    k‚ÇÅ‚Ä≤ = unique(k‚ÇÅ)
    k‚ÇÇ‚Ä≤ = unique(k‚ÇÇ)
    k‚ÇÅ‚Çä = KnotVector([(k‚ÇÅ‚Ä≤[i] + k‚ÇÅ‚Ä≤[i+1]) / 2 for i in 1:(length(k‚ÇÅ‚Ä≤)-1)])
    k‚ÇÇ‚Çä = KnotVector([(k‚ÇÇ‚Ä≤[i] + k‚ÇÇ‚Ä≤[i+1]) / 2 for i in 1:(length(k‚ÇÇ‚Ä≤)-1)])
    return k‚ÇÅ‚Çä, k‚ÇÇ‚Çä
end

"""
    show_knotvector(::StepTree; index=0)

Show current knotvector and suggestions for knot insertions (with given index).
"""
function show_knotvector(steptree; index = 0)
    M = loadM(steptree, index = index)

    P = bsplinespaces(M)
    k‚ÇÅ, k‚ÇÇ = knotvector.(P)
    k‚ÇÅ‚Çä, k‚ÇÇ‚Çä = suggest_knotvector(steptree, index=index)
    msg = """
    Current knotvectors (k‚ÇÅ, k‚ÇÇ) and suggestions for knot insertions (k‚ÇÅ‚Çä, k‚ÇÇ‚Çä)
    k‚ÇÅ: $(BasicBSpline._vec(k‚ÇÅ))
    k‚ÇÇ: $(BasicBSpline._vec(k‚ÇÇ))
    k‚ÇÅ‚Çä: $(BasicBSpline._vec(k‚ÇÅ‚Çä))
    k‚ÇÇ‚Çä: $(BasicBSpline._vec(k‚ÇÇ‚Çä))
    """
    @info msg
    return
end

function integrate(C::BSplineManifold{1})
    a = controlpoints(C)
    P = bsplinespaces(C)[1]
    p = degree(P)
    k = knotvector(P)
    k‚Ä≤ = k + k[[begin, end]]
    p‚Ä≤ = p+1
    P‚Ä≤ = BSplineSpace{p‚Ä≤}(k‚Ä≤)
    A = [ifelse(i‚â§j, 0.0, (k‚Ä≤[p‚Ä≤+j+1]-k‚Ä≤[j+1])/(p‚Ä≤)) for i in 1:dim(P‚Ä≤), j in 1:dim(P)]
    return BSplineManifold(A*a, P‚Ä≤)
end

function _interpolate2(ts::AbstractVector{<:Real}, fs::AbstractVector{T}, f‚Ä≤0::T) where T
    # Quadric open B-spline space
    p = 2
    k = KnotVector(ts) + KnotVector([ts[1],ts[end]]) * p
    P = BSplineSpace{p}(k)

    # dimensions
    m = length(ts)
    n = dim(P)

    # The interpolant function has a f''=0 property at bounds.
    dP = BSplineDerivativeSpace{1}(P)
    d0 = [bsplinebasis(dP,j,ts[1]) for j in 1:n]

    # Compute the interpolant function (1-dim B-spline manifold)
    M = [bsplinebasis(P,j,ts[i]) for i in 1:m, j in 1:n]
    M = vcat(d0', M)
    y = vcat([f‚Ä≤0], fs)
    return BSplineManifold(inv(M)*y, P)
end

function _merge(manifolds::Vector{<:BSplineManifold{2, p}}) where p
    # Assume all B-spline manifolds have open knot vectors.
    p‚ÇÅ, p‚ÇÇ = p

    k‚ÇÅ = copy(knotvector(bsplinespaces(manifolds[1])[1]))
    k‚ÇÇ = knotvector(bsplinespaces(manifolds[1])[2])
    for i in 2:length(manifolds)
        pop!(k‚ÇÅ.vector)
        k‚ÇÅ += knotvector(bsplinespaces(manifolds[i])[1])[p‚ÇÅ+2:end]
    end
    P‚ÇÅ = BSplineSpace{p‚ÇÅ}(k‚ÇÅ)
    P‚ÇÇ = BSplineSpace{p‚ÇÇ}(k‚ÇÇ)

    ùíÇ = controlpoints(manifolds[1])
    for i in 2:length(manifolds)
        _ùíÇ = controlpoints(manifolds[i])
        v = ùíÇ[end,:]
        _v = _ùíÇ[1,:]
        Œî = v[end] - v[1]
        _Œî = _v[end] - _v[1]
        a = dot(Œî, _Œî)
        b = cross(Œî, _Œî)
        r = (@SMatrix [a b;-b a]) / norm([a,b])
        _w = [r*p for p in _v]
        c = sum(v)/length(v)
        _c = sum(_w)/length(_w)
        _ùíÇ = [r*p-_c+c for p in _ùíÇ]
        ùíÇ = vcat(ùíÇ[1:end-1, :], (ùíÇ[end:end, :]+_ùíÇ[1:1, :])/2, _ùíÇ[2:end, :])
    end
    return BSplineManifold(ùíÇ, P‚ÇÅ, P‚ÇÇ)
end
