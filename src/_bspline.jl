function _arrayofvector2array(a::AbstractArray{SVector{2,Float64},2})
    n1,n2 = size(a)
    a_2dim = [a[i1,i2][j] for i1 in 1:n1, i2 in 1:n2, j in 1:2]
    return a_2dim
end

function _array2arrayofvector(a::Array{<:Real,3})
    n1,n2 = size(a)
    a_vec = [SVector{2}(a[i1,i2,:]) for i1 in 1:n1, i2 in 1:n2]
    return a_vec
end

"""
Affine transform of control points.
"""
function _affine(ùíÇ::Matrix{<:SVector}, A::SMatrix{2,2}, b::SVector{2})
    # x'=Ax+b
    n‚ÇÅ, n‚ÇÇ = size(ùíÇ)
    return [(A*ùíÇ[I‚ÇÅ,I‚ÇÇ]+b) for I‚ÇÅ in 1:n‚ÇÅ, I‚ÇÇ in 1:n‚ÇÇ]
end

function _rotate(ùíÇ::Matrix{<:SVector})
    n‚ÇÅ, n‚ÇÇ = size(ùíÇ)
    ind0 = [(n‚ÇÅ + 1) √∑ 2, (n‚ÇÇ + 1) √∑ 2]
    ind1 = ind0 - [0, 1]
    v = ùíÇ[ind1...] - ùíÇ[ind0...]
    R = - (@SMatrix [v[2] -v[1]; v[1] v[2]]) / norm(v)
    return _affine(ùíÇ, R, SVector(0.0, 0.0))
end

function _center(ùíÇ::Matrix{<:SVector})
    xs = [p[1] for p in ùíÇ]
    ys = [p[2] for p in ùíÇ]
    x_min = minimum(xs)
    x_max = maximum(xs)
    y_min = minimum(ys)
    y_max = maximum(ys)
    x = (x_min+x_max)/2
    y = (y_min+y_max)/2
    return _affine(ùíÇ, one(SMatrix{2,2}), -SVector(x,y))
end

function _positioning(ùíÇ::Matrix{<:SVector})
    return _center(_rotate(ùíÇ))
end

function _positioning(M::BSplineManifold{2})
    Ps = bsplinespaces(M)
    ùíÇ = controlpoints(M)
    ùíÇ‚Ä≤ = _positioning(ùíÇ)
    return BSplineManifold(ùíÇ‚Ä≤,Ps)
end

"""
    refinement!(allsteps; p‚Çä::Tuple{Int,Int}=(0, 0), k‚Çä::Tuple{AbstractKnotVector,AbstractKnotVector}=(EmptyKnotVector(),EmptyKnotVector()), parent::Int=0)

Compute a refinement of the B-spline manifold
"""
function refinement!(allsteps; p‚Çä=(0,0), k‚Çä=(EmptyKnotVector(),EmptyKnotVector()), parent::Int=0)
    parent = _validindex(allsteps, parent)
    M = loadM(allsteps, index=parent)

    P‚ÇÅ, P‚ÇÇ = bsplinespaces(M)
    k‚ÇÅ, k‚ÇÇ = knotvector(P‚ÇÅ), knotvector(P‚ÇÇ)

    p‚Çä‚ÇÅ, p‚Çä‚ÇÇ = p‚Çä
    k‚Çä‚ÇÅ, k‚Çä‚ÇÇ = k‚Çä

    if !iszero(k‚Çä‚ÇÅ) && !(k‚ÇÅ[1] < k‚Çä‚ÇÅ[1] && k‚Çä‚ÇÅ[end] < k‚ÇÅ[end])
        error("given additional knots for refinement are out of range")
    end

    if !iszero(k‚Çä‚ÇÇ) && !(k‚ÇÇ[1] < k‚Çä‚ÇÇ[1] && k‚Çä‚ÇÇ[end] < k‚ÇÇ[end])
        error("given additional knots for refinement are out of range")
    end

    comment = "Refinement - p‚Çä:$((p‚Çä‚ÇÅ, p‚Çä‚ÇÇ)), k‚Çä:$((BasicBSpline._vec(k‚Çä‚ÇÅ), BasicBSpline._vec(k‚Çä‚ÇÇ)))"
    comment = replace(comment, "Float64"=>"")
    M = refinement(M, (Val(p‚Çä‚ÇÅ), Val(p‚Çä‚ÇÇ)), (k‚Çä‚ÇÅ, k‚Çä‚ÇÇ))
    step = Step(M, comment)
    addstep!(allsteps, step, parent)
end

"""
    show_knotvector(; index=0)

Show current knotvector and suggestions for knot insertions (with given index).
"""
function show_knotvector(allsteps; index=0)
    M = loadM(allsteps, index=index)

    P = bsplinespaces(M)
    k‚ÇÅ, k‚ÇÇ = knotvector.(P)
    k‚ÇÅ‚Ä≤ = unique(k‚ÇÅ)
    k‚ÇÇ‚Ä≤ = unique(k‚ÇÇ)
    msg = """
    Current knotvectors (k‚ÇÅ, k‚ÇÇ) and suggestions for knot insertions (k‚ÇÅ‚Çä, k‚ÇÇ‚Çä)
    k‚ÇÅ: , $BasicBSpline._vec((k‚ÇÅ))
    k‚ÇÇ: , $BasicBSpline._vec((k‚ÇÇ))
    k‚ÇÅ‚Çä: , $([(k‚ÇÅ‚Ä≤[i] + k‚ÇÅ‚Ä≤[i+1]) / 2 for i in 1:(length(k‚ÇÅ‚Ä≤)-1)])
    k‚ÇÇ‚Çä: , $([(k‚ÇÇ‚Ä≤[i] + k‚ÇÇ‚Ä≤[i+1]) / 2 for i in 1:(length(k‚ÇÇ‚Ä≤)-1)])
    """
    @info msg
    return
end
