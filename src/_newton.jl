function DefaultOrientation(n‚ÇÅ, n‚ÇÇ)
    return ([(n‚ÇÅ + 1) √∑ 2, (n‚ÇÇ + 1) √∑ 2, 1], [(n‚ÇÅ + 1) √∑ 2, (n‚ÇÇ + 1) √∑ 2, 2], [(n‚ÇÅ + 1) √∑ 2, (n‚ÇÇ + 1) √∑ 2 - 1, 1])
end

function FixThreePoints(n‚ÇÅ, n‚ÇÇ)
    return (
        [1, (n‚ÇÇ + 1) √∑ 2, 1],
        [1, (n‚ÇÇ + 1) √∑ 2, 2],
        [(n‚ÇÅ + 1) √∑ 2, (n‚ÇÇ + 1) √∑ 2, 1],
        [(n‚ÇÅ + 1) √∑ 2, (n‚ÇÇ + 1) √∑ 2, 2],
        [n‚ÇÅ, (n‚ÇÇ + 1) √∑ 2, 1],
        [n‚ÇÅ, (n‚ÇÇ + 1) √∑ 2, 2],
    )
end

AbbStr(t::Week) = string(t.value) * "w "
AbbStr(t::Day) = string(t.value) * "d "
AbbStr(t::Hour) = string(t.value) * "h "
AbbStr(t::Minute) = string(t.value) * "m "
AbbStr(t::Second) = string(t.value) * "s "
AbbStr(t::Millisecond) = string(t.value) * "ms "
AbbStr(t::Vector{Period}) = *(AbbStr.(t)...)[1:end-1]

function SecondsToString(Œît::Float64)
    prds = Dates.canonicalize(Dates.CompoundPeriod(Dates.Millisecond(floor(1000Œît)))).periods
    return AbbStr(prds)
end

"""
    newton_onestep(; fixingmethod=:default, parent::Int=0, nip=NIP)

Compute one step of Newton-Raphson method
"""
function newton_onestep(; fixingmethod=:default, parent::Int=0, nip=NIP)
    if fixingmethod == :default
        fixed = DefaultOrientation
    elseif fixingmethod == :fix3points
        fixed = FixThreePoints
    else
        error("No method for $(fixingmethod)")
    end
    parent = _realparent(parent)
    M = loadM(index=parent)

    n‚ÇÅ, n‚ÇÇ = dim.(bsplinespaces(M))

    iseven(n‚ÇÅ) && error("n‚ÇÅ should be odd numbers")
    iseven(n‚ÇÇ) && error("n‚ÇÇ should be odd numbers")

    M = _positioning(M)
    M, F, GÃå, Œît = _newton(M, fixed, nip=nip)
    comment =
        "Newton onestep - residual norm: " *
        (@sprintf("%.4e", norm(F))) *
        ", Œîa norm: " *
        (@sprintf("%.4e", norm(GÃå))) *
        ", computation time: " *
        SecondsToString(Œît)
    _export(M, parent, comment=comment)
end

function _newton(M::AbstractBSplineManifold, fix_method; nip=NIP)
    ùíÇ = controlpoints(M)
    P = collect(bsplinespaces(M))
    n‚ÇÅ, n‚ÇÇ = dim.(P)
    lineup(I‚ÇÅ, I‚ÇÇ, i) = (i-1)*n‚ÇÅ*n‚ÇÇ + (I‚ÇÇ-1)*n‚ÇÅ + (I‚ÇÅ-1) + 1

    t‚ÇÄ = time()

    H = zeros(n‚ÇÅ,n‚ÇÇ,2,n‚ÇÅ,n‚ÇÇ,2)
    F = zeros(n‚ÇÅ,n‚ÇÇ,2)
    Threads.@threads for I‚ÇÅ in 1:n‚ÇÅ
        for I‚ÇÇ in 1:n‚ÇÇ, i in 1:2, R‚ÇÅ in 1:n‚ÇÅ, R‚ÇÇ in 1:n‚ÇÇ, r in 1:2
            if lineup(I‚ÇÅ, I‚ÇÇ, i) ‚â§ lineup(R‚ÇÅ, R‚ÇÇ, r)
                H[I‚ÇÅ, I‚ÇÇ, i, R‚ÇÅ, R‚ÇÇ, r] = H[R‚ÇÅ, R‚ÇÇ, r, I‚ÇÅ, I‚ÇÇ, i] = elm_H(M, I‚ÇÅ, I‚ÇÇ, i, R‚ÇÅ, R‚ÇÇ, r, nip=nip)
            end
        end
    end
    Threads.@threads for I‚ÇÅ in 1:n‚ÇÅ
        for I‚ÇÇ in 1:n‚ÇÇ, i in 1:2
            F[I‚ÇÅ, I‚ÇÇ, i] = elm_F(M, I‚ÇÅ, I‚ÇÇ, i, nip=nip)
        end
    end

    t‚ÇÅ = time()

    N = 2n‚ÇÅ*n‚ÇÇ
    _fixed = sort(collect((i -> lineup(i...)).(fix_method(n‚ÇÅ, n‚ÇÇ))))
    _unfixed = deleteat!(collect(1:N), _fixed)

    F = reshape(F, N)
    H = reshape(H, N, N)
    ùíÇ = ùíÇ‚Çí = reshape(ùíÇ, N)
    HÃå = H[_unfixed, _unfixed]
    ùíÇÃå = ùíÇ[_unfixed]
    FÃå = F[_unfixed]
    GÃå = HÃå \ FÃå
    ùíÇÃå = ùíÇÃå - GÃå
    for i in _fixed
        insert!(ùíÇÃå, i, ùíÇ‚Çí[i])
    end
    ùíÇ = reshape(ùíÇÃå, n‚ÇÅ, n‚ÇÇ, 2)
    M = typeof(M)(P, ùíÇ)
    return M, F, GÃå, t‚ÇÅ - t‚ÇÄ
end

function elm_H(M::AbstractBSplineManifold, I‚ÇÅ, I‚ÇÇ, i, R‚ÇÅ, R‚ÇÇ, r; nip=NIP)
    ùíÇ = controlpoints(M)
    P‚ÇÅ, P‚ÇÇ = P = bsplinespaces(M)
    p‚ÇÅ, p‚ÇÇ = degree.(P)
    k‚ÇÅ, k‚ÇÇ = knots.(P)
    n‚ÇÅ, n‚ÇÇ = dim.(P)

    ùúπ = [1.0 0.0; 0.0 1.0]
    Œ£‚ÇÅ = max(I‚ÇÅ, R‚ÇÅ):min(I‚ÇÅ, R‚ÇÅ)+p‚ÇÅ
    Œ£‚ÇÇ = max(I‚ÇÇ, R‚ÇÇ):min(I‚ÇÇ, R‚ÇÇ)+p‚ÇÇ

    if length(Œ£‚ÇÅ) == 0 || length(Œ£‚ÇÇ) == 0
        return 0.0
    else
        return sum(
            GaussianQuadrature(
                u ->
                    (
                        g = g‚Çç‚ÇÄ‚Çé(u);
                        g‚Åª = inv(g);
                        ùùä = sqrt(det(g));
                        ùëÅ = [N‚Ä≤(P‚ÇÅ, P‚ÇÇ, I‚ÇÅ, I‚ÇÇ, i, u) for I‚ÇÅ in 1:n‚ÇÅ, I‚ÇÇ in 1:n‚ÇÇ, i in 1:2];
                        Q = [sum(ùíÇ[I‚ÇÅ, I‚ÇÇ, i] * ùëÅ[I‚ÇÅ, I‚ÇÇ, j] for I‚ÇÅ in 1:n‚ÇÅ, I‚ÇÇ in 1:n‚ÇÇ) for i in 1:2, j in 1:2];
                        sum(
                            C(p, q, m, n, g‚Åª) *
                            ùëÅ[I‚ÇÅ, I‚ÇÇ, p] *
                            (ùúπ[i, r] * ùëÅ[R‚ÇÅ, R‚ÇÇ, q] * (sum(Q[o, m] * Q[o, n] for o in 1:2) - g[m, n]) + 2 * ùëÅ[R‚ÇÅ, R‚ÇÇ, n] * Q[i, q] * Q[r, m])
                            for p in 1:2, q in 1:2, m in 1:2, n in 1:2
                        )
                    ) * ùùä,
                k‚ÇÅ[s‚ÇÅ]..k‚ÇÅ[s‚ÇÅ+1],
                k‚ÇÇ[s‚ÇÇ]..k‚ÇÇ[s‚ÇÇ+1],
                nip=nip,
            ) for s‚ÇÅ in Œ£‚ÇÅ, s‚ÇÇ in Œ£‚ÇÇ
        )
    end
end

function elm_F(M::AbstractBSplineManifold, I‚ÇÅ, I‚ÇÇ, i; nip = NIP)
    ùíÇ = controlpoints(M)
    P‚ÇÅ, P‚ÇÇ = P = bsplinespaces(M)
    p‚ÇÅ, p‚ÇÇ = degree.(P)
    k‚ÇÅ, k‚ÇÇ = knots.(P)
    n‚ÇÅ, n‚ÇÇ = dim.(P)

    Œ£‚ÇÅ = I‚ÇÅ:I‚ÇÅ+p‚ÇÅ
    Œ£‚ÇÇ = I‚ÇÇ:I‚ÇÇ+p‚ÇÇ

    return sum(
        GaussianQuadrature(
            u ->
                (
                    g = g‚Çç‚ÇÄ‚Çé(u);
                    g‚Åª = inv(g);
                    ùùä = sqrt(det(g));
                    ùëÅ = [N‚Ä≤(P‚ÇÅ, P‚ÇÇ, I‚ÇÅ, I‚ÇÇ, i, u) for I‚ÇÅ in 1:n‚ÇÅ, I‚ÇÇ in 1:n‚ÇÇ, i in 1:2];
                    Q = [sum(ùíÇ[I‚ÇÅ, I‚ÇÇ, i] * ùëÅ[I‚ÇÅ, I‚ÇÇ, j] for I‚ÇÅ in 1:n‚ÇÅ, I‚ÇÇ in 1:n‚ÇÇ) for i in 1:2, j in 1:2];
                    sum(
                        sum(C(p, q, m, n, g‚Åª) * ùëÅ[I‚ÇÅ, I‚ÇÇ, p] * Q[i, q] for p in 1:2, q in 1:2) * (sum(Q[o, m] * Q[o, n] for o in 1:2) - g[m, n])
                        for m in 1:2, n in 1:2
                    )
                ) * ùùä,
            k‚ÇÅ[s‚ÇÅ]..k‚ÇÅ[s‚ÇÅ+1],
            k‚ÇÇ[s‚ÇÇ]..k‚ÇÇ[s‚ÇÇ+1],
            nip = nip,
        ) for s‚ÇÅ in Œ£‚ÇÅ, s‚ÇÇ in Œ£‚ÇÇ
    )
end
