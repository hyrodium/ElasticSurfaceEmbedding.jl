using ForwardDiff

# Strain
E(M, u) = (g‚Çç‚Çú‚Çé(M, u) - g‚Çç‚ÇÄ‚Çé(u)) / 2
E‚ÇÅ‚ÇÅ(M::AbstractBSplineManifold, u) = (g‚Çç‚Çú‚Çé‚ÇÅ‚ÇÅ(M, u) - g‚Çç‚ÇÄ‚Çé‚ÇÅ‚ÇÅ(u)) / 2
E‚ÅΩ‚Å∞‚Åæ‚ÇÅ‚ÇÅ(M::AbstractBSplineManifold, u) = E‚ÇÅ‚ÇÅ(M, u) / g‚Çç‚ÇÄ‚Çé‚ÇÅ‚ÇÅ(u)
E‚ÇÅ‚ÇÅ_cont(M::AbstractBSplineManifold, u) = (g‚Çç‚Çú‚Çé‚ÇÅ‚ÇÅ_cont(M, u) - g‚Çç‚ÇÄ‚Çé‚ÇÅ‚ÇÅ(u)) / 2
E‚ÅΩ‚Å∞‚Åæ‚ÇÅ‚ÇÅ_cont(M::AbstractBSplineManifold, u) = E‚ÇÅ‚ÇÅ_cont(M, u) / g‚Çç‚ÇÄ‚Çé‚ÇÅ‚ÇÅ(u)

function EÃÉ‚ÅΩ‚Å∞‚Åæ‚ÇÅ‚ÇÅ(D‚ÇÇ::ClosedInterval, u)
    b = width(D‚ÇÇ) / 2
    c = sum(extrema(D‚ÇÇ)) / 2
    r = (u[2] - c) / b
    return (1 / 2) * K‚Çç‚ÇÄ‚Çé(D‚ÇÇ, u[1]) * BÃÉ(D‚ÇÇ, u[1])^2 * (r^2 - 1 / 3)
end

function EÃÉ‚ÅΩ‚Å∞‚Åæ‚ÇÅ‚ÇÅ(M::AbstractBSplineManifold, u)
    P‚ÇÅ, P‚ÇÇ = P = bsplinespaces(M)
    p‚ÇÅ, p‚ÇÇ = degree.(P)
    k‚ÇÅ, k‚ÇÇ = P‚ÇÅ.knots, P‚ÇÇ.knots
    D‚ÇÇ = k‚ÇÇ[1+p‚ÇÇ]..k‚ÇÇ[end-p‚ÇÇ]
    return EÃÉ‚ÅΩ‚Å∞‚Åæ‚ÇÅ‚ÇÅ(D‚ÇÇ, u)
end

function ComputeMaximumStrain(; index = 0, mesh = tuple(20 * [MESH...]...))
    M = loadM(index = index)
    ùíÇ = controlpoints(M)
    P‚ÇÅ, P‚ÇÇ = P = bsplinespaces(M)
    p‚ÇÅ, p‚ÇÇ = p = degree.(P)
    k‚ÇÅ, k‚ÇÇ = k = knots.(P)
    D‚ÇÅ, D‚ÇÇ = D = k‚ÇÅ[1+p‚ÇÅ]..k‚ÇÅ[end-p‚ÇÅ], k‚ÇÇ[1+p‚ÇÇ]..k‚ÇÇ[end-p‚ÇÇ]

    Œ∫‚ÇÅ = range(leftendpoint(D‚ÇÅ) + 0.0001, stop = rightendpoint(D‚ÇÅ) - 0.0001, length = mesh[1] + 1)
    Œ∫‚ÇÇ = range(leftendpoint(D‚ÇÇ) + 0.0001, stop = rightendpoint(D‚ÇÇ) - 0.0001, length = mesh[2] + 1)

    E = [E‚ÅΩ‚Å∞‚Åæ‚ÇÅ‚ÇÅ(M, [u‚ÇÅ, u‚ÇÇ]) for u‚ÇÅ in Œ∫‚ÇÅ, u‚ÇÇ in Œ∫‚ÇÇ]

    return (minimum(E), maximum(E))
end

function PredictMaximumStrain(D; mesh = tuple(20 * [MESH...]...))
    D‚ÇÅ, D‚ÇÇ = D

    Œ∫‚ÇÅ = range(leftendpoint(D‚ÇÅ), stop = rightendpoint(D‚ÇÅ), length = mesh[1] + 1)
    Œ∫‚ÇÇ = range(leftendpoint(D‚ÇÇ), stop = rightendpoint(D‚ÇÇ), length = mesh[2] + 1)

    E = [EÃÉ‚ÅΩ‚Å∞‚Åæ‚ÇÅ‚ÇÅ(D‚ÇÇ, [u‚ÇÅ, u‚ÇÇ]) for u‚ÇÅ in Œ∫‚ÇÅ, u‚ÇÇ in Œ∫‚ÇÇ]

    return (minimum(E), maximum(E))
end

export ShowMaximumStrain
function ShowMaximumStrain(D; index = 0)
    minE, maxE = PredictMaximumStrain(D)

    println("Predicted: (min: ", minE, ", max: ", maxE, ")")

    if isTheShapeComputed()
        minE, maxE = ComputeMaximumStrain(index = index)
        println("Computed: (min: ", minE, ", max: ", maxE, ")")
    end

    return
end


# Elastic Modulus
function C(i, j, k, l, g‚Åª)
    ùùÄ * g‚Åª[i, j] * g‚Åª[k, l] + ùùÅ * (g‚Åª[i, k] * g‚Åª[j, l] + g‚Åª[i, l] * g‚Åª[j, k])
end
